// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
#nullable disable

namespace BlazorChatAPI
{
    public partial class BlazorChatDbContext : DbContext
    {
        public BlazorChatDbContext()
        {
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=minhnguyen359\\db1107229;Initial Catalog=DBWebChat;Integrated Security=True;");
            }
        }

        public BlazorChatDbContext(DbContextOptions<BlazorChatDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<AccountGroup> AccountGroup { get; set; }
        public virtual DbSet<BoxChat> BoxChat { get; set; }
        public virtual DbSet<GroupChat> GroupChat { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<Reaction> Reaction { get; set; }
        public virtual DbSet<StatusInBoxChat> StatusInBoxChat { get; set; }
        public virtual DbSet<TypeOfGroup> TypeOfGroup { get; set; }
        public virtual DbSet<TypeOfMessage> TypeOfMessage { get; set; }
        public virtual DbSet<TypeOfPermission> TypeOfPermission { get; set; }
        public virtual DbSet<TypeOfReaction> TypeOfReaction { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasIndex(e => e.Username)
                    .IsUnique();

                entity.HasIndex(e => e.PhoneNumber)
                    .IsUnique();

                entity.HasIndex(e => e.Email)
                    .IsUnique();

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.Country).HasMaxLength(50);
                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.Dob).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<AccountGroup>(entity =>
            {
                entity.ToTable("Account_Group");

                entity.HasIndex(e => new { e.AccountId, e.GroupId })
                    .IsUnique();

                entity.Property(e => e.AccountGroupId).HasColumnName("AccountGroupID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.IsMember)
                    .IsRequired()
                    .HasDefaultValueSql("('1')");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountGroup)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK__Account_G__Accou__3C69FB99");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.AccountGroup)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK__Account_G__Group__3D5E1FD2");
            });

            modelBuilder.Entity<BoxChat>(entity =>
            {
                entity.HasKey(e => e.BoxId)
                    .HasName("PK__BoxChat__136CF7043C87252C");

                entity.Property(e => e.BoxId).HasColumnName("BoxID");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasDefaultValueSql("('default_boxchat_image.jpeg')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('New Chat')");
            });

            modelBuilder.Entity<GroupChat>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("PK__GroupCha__149AF30A4C54CC73");

                entity.HasIndex(e => e.BoxId)
                    .IsUnique();

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.BoxId).HasColumnName("BoxID");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('New Group')");

                entity.Property(e => e.GroupType).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Box)
                    .WithOne(p => p.GroupChat)
                    .HasForeignKey<GroupChat>(d => d.BoxId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__GroupChat__BoxID__32E0915F");

                entity.HasOne(d => d.GroupTypeNavigation)
                    .WithMany(p => p.GroupChat)
                    .HasForeignKey(d => d.GroupType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__GroupChat__Group__33D4B598");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasIndex(e => new { e.AccountGroupId, e.MessageNumber })
                    .IsUnique();

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.AccountGroupId).HasColumnName("AccountGroupID");

                entity.Property(e => e.BoxId).HasColumnName("BoxID");

                entity.Property(e => e.Content).IsRequired();

                entity.Property(e => e.MessageType).HasDefaultValueSql("((1))");

                entity.Property(e => e.TimeSend)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.AccountGroup)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.AccountGroupId)
                    .HasConstraintName("FK__Message__Account__44FF419A");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK__Message__BoxID__440B1D61");

                entity.HasOne(d => d.MessageTypeNavigation)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.MessageType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Message__Message__46E78A0C");
            });

            modelBuilder.Entity<Reaction>(entity =>
            {
                entity.HasKey(e => e.ReactId)
                    .HasName("PK__Reaction__7661ACCF254A746D");

                entity.HasIndex(e => new { e.MessageId, e.TypeOfReactionId, e.AccountGroupId })
                    .IsUnique();

                entity.Property(e => e.ReactId).HasColumnName("ReactID");

                entity.Property(e => e.AccountGroupId).HasColumnName("AccountGroupID");

                entity.Property(e => e.Count).HasDefaultValueSql("((1))");

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.TypeOfReactionId).HasColumnName("TypeOfReactionID");

                entity.HasOne(d => d.AccountGroup)
                    .WithMany(p => p.Reaction)
                    .HasForeignKey(d => d.AccountGroupId)
                    .HasConstraintName("FK__Reaction__Accoun__4D94879B");

                entity.HasOne(d => d.Message)
                    .WithMany(p => p.Reaction)
                    .HasForeignKey(d => d.MessageId)
                    .HasConstraintName("FK__Reaction__Messag__4BAC3F29");

                entity.HasOne(d => d.TypeOfReaction)
                    .WithMany(p => p.Reaction)
                    .HasForeignKey(d => d.TypeOfReactionId)
                    .HasConstraintName("FK__Reaction__TypeOf__4CA06362");
            });

            modelBuilder.Entity<StatusInBoxChat>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("PK__StatusIn__C8EE2043BDCA7A35");

                entity.HasIndex(e => new { e.AccountGroupId, e.TypeOfPermissionId })
                    .IsUnique();

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.AccountGroupId).HasColumnName("AccountGroupID");

                entity.Property(e => e.CurrentStatus)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('unread')");

                entity.Property(e => e.IsCreator)
                    .IsRequired()
                    .HasDefaultValueSql("('False')");

                entity.Property(e => e.TypeOfPermissionId).HasColumnName("TypeOfPermissionID");

                entity.HasOne(d => d.AccountGroup)
                    .WithMany(p => p.StatusInBoxChat)
                    .HasForeignKey(d => d.AccountGroupId)
                    .HasConstraintName("FK__StatusInB__Accou__5165187F");

                entity.HasOne(d => d.TypeOfPermission)
                    .WithMany(p => p.StatusInBoxChat)
                    .HasForeignKey(d => d.TypeOfPermissionId)
                    .HasConstraintName("FK__StatusInB__TypeO__52593CB8");
            });

            modelBuilder.Entity<TypeOfGroup>(entity =>
            {
                entity.HasIndex(e => e.Description)
                    .IsUnique();

                entity.Property(e => e.TypeOfGroupId).HasColumnName("TypeOfGroupID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(30);
            });

            modelBuilder.Entity<TypeOfMessage>(entity =>
            {
                entity.Property(e => e.TypeOfMessageId).HasColumnName("TypeOfMessageID");

                entity.Property(e => e.Description).HasMaxLength(30);

                entity.Property(e => e.Name).HasMaxLength(30);
            });

            modelBuilder.Entity<TypeOfPermission>(entity =>
            {
                entity.Property(e => e.TypeOfPermissionId).HasColumnName("TypeOfPermissionID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(30);
            });

            modelBuilder.Entity<TypeOfReaction>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .IsUnique();

                entity.Property(e => e.TypeOfReactionId).HasColumnName("TypeOfReactionID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}